// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String?     @unique @db.VarChar(255)
  fullName      String?     @db.VarChar(100)
  userID        String?     @unique @db.VarChar(50)
  password      String?     @db.VarChar(255)
  city          String?     @db.VarChar(255)
  country       String?     @db.VarChar(255)
  bio           String?     @db.VarChar(500)
  questions     Questions[]
  answers       Answers[]
  profileImage  Images?     @relation(fields: [profileImgId], references: [id])
  profileImgId  String?     @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  isAdmin       Boolean     @default(false)
  isVerified    Boolean     @default(false)
  questionVotes Votes[]
}

model Questions {
  id          String    @id @default(uuid())
  title       String?   @db.VarChar(255)
  images      Images[]
  answers     Answers[]
  description String?   @db.Text
  tags        String[]  @default(["no tag"])
  createdAt   DateTime  @default(now())
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  Votes       Votes[]
}

model Votes {
  id         String    @id @default(uuid())
  type       VoteType
  uidID      String
  questionID String
  user       User      @relation(fields: [uidID], references: [id], onDelete: Cascade)
  question   Questions @relation(fields: [questionID], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())

  @@unique([uidID,questionID])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Images {
  id         String     @id @default(uuid())
  url        String?    @db.VarChar(500)
  fileId     String?    @db.VarChar(500)
  questionId String?
  createdAt  DateTime   @default(now())
  question   Questions? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User?      @relation()
}

model Answers {
  id          String    @id @default(uuid())
  content     String?   @db.Text
  questionId  String
  createdById String
  upvote      Int       @default(0)
  downvote    Int       @default(0)
  isAccepted  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  question    Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
}
